{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Blog",
  "home_page_url": "https://heeiya.github.io/KDEBlog/zh/",
  "feed_url": "https://heeiya.github.io/KDEBlog/zh/feed.json",
  "description": "关于参与OSPP中KDE社区的开发",
  "icon": "https://avatars.githubusercontent.com/u/90752469?s=400&u=69796f3c09ffaa19d5dc128699599458dadb5d14&v=4",
  "items": [
    {
      "title": "QML 安卓应用构建与运行",
      "url": "https://heeiya.github.io/KDEBlog/zh/posts/QML%20%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E6%9E%84%E5%BB%BA%E4%B8%8E%E8%BF%90%E8%A1%8C.html",
      "id": "https://heeiya.github.io/KDEBlog/zh/posts/QML%20%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E6%9E%84%E5%BB%BA%E4%B8%8E%E8%BF%90%E8%A1%8C.html",
      "summary": "QML 安卓应用构建与运行\n构建QML安卓应用\nQtCreator会使用Gradle来进行项目构建，当你准备好了项目代码，在Qtcreator中选择好用于构建的安卓套件，点击构建，QtCreator会为你产生一些Gradle的配置文件，同时你可能会遇到的这样的报错\n\nExecution failed for task ':processDebugRes...",
      "content_html": "\n<h2>构建QML安卓应用</h2>\n<p>QtCreator会使用Gradle来进行项目构建，当你准备好了项目代码，在Qtcreator中选择好用于构建的安卓套件，点击构建，QtCreator会为你产生一些Gradle的配置文件，同时你可能会遇到的这样的报错</p>\n<blockquote>\n<p>Execution failed for task ':processDebugResources'.\nA failure occurred while executing com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask$TaskAction\nAndroid resource linking failed\naapt2 E 07-23 15:59:44 51907 51907 LoadedArsc.cpp:94] RES_TABLE_TYPE_TYPE entry offsets overlap actual entry data.\naapt2 E 07-23 15:59:44 51907 51907 ApkAssets.cpp:149] Failed to load resources table in APK '/home/zhy/Android/Sdk/platforms/android-35/android.jar'.</p>\n</blockquote>\n<p>这是因为目前使用的Gradle插件版本不支持android-35\n见<a href=\"https://stackoverflow.com/questions/54152209/how-to-fix-execution-failed-for-task-appprocessdebugresources-android-re\" target=\"_blank\" rel=\"noopener noreferrer\">How to fix \"Execution failed for task ':app:processDebugResources'. &gt; Android resource linking failed\"[Android/Flutter] - Stack Overflow</a></p>\n<p>这时需要修改Gradle配置文件\n进入项目的/build/Qt_6_7_2_Clang_arm64_v8a-Debug/android-build文件夹下</p>\n<p>打开build.gradle文件</p>\n<div class=\"language-text\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code><span class=\"line\">dependencies {</span>\n<span class=\"line\">        classpath 'com.android.tools.build:gradle:7.4.1'</span>\n<span class=\"line\">    }</span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre></div><p>com.android.tools.build:gradle:7.4.1是安卓Gradle插件（Android Gradle Plugin，AGP)\n可以看到，默认的插件版本是7.4.1，这是22年的版本，已经比较老了。\n最新的版本可以在这里查看：<a href=\"https://mvnrepository.com/artifact/com.android.tools.build/gradle?repo=google\" target=\"_blank\" rel=\"noopener noreferrer\">Maven Repository: com.android.tools.build » gradle</a>\n将插件版本更新为较新版本，如，修改build.gradle：</p>\n<div class=\"language-text\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code><span class=\"line\">    dependencies {</span>\n<span class=\"line\">        classpath 'com.android.tools.build:gradle:8.4.1'</span>\n<span class=\"line\">    }</span>\n<span class=\"line\"></span></code></pre></div><p>除此之外，升级插件版本还要检查<a href=\"https://gradle.org/releases/\" target=\"_blank\" rel=\"noopener noreferrer\">gradle版本</a>是否支持这个插件的版本\n其关系可以在这里查看：<a href=\"https://developer.android.com/build/releases/gradle-plugin#updating-gradle\" target=\"_blank\" rel=\"noopener noreferrer\">Android Gradle plugin 8.5 release notes &nbsp;|&nbsp; Android Studio &nbsp;|&nbsp; Android Developers</a></p>\n<blockquote>\n<p>参考<a href=\"https://stackoverflow.com/questions/70545646/could-not-find-com-android-tools-buildgradle7-3-3-error-found-in-build-gradle\" target=\"_blank\" rel=\"noopener noreferrer\">Could not find com.android.tools.build:gradle:7.3.3. error found in build.gradle file - Stack Overflow</a></p>\n</blockquote>\n<p>因此，我们至少要使用8.6版本的Gradle来支持这个插件。</p>\n<p>进入./gradle/wrapper文件夹下，修改gradle-warpper.properties文件，这里定义了项目使用的gradle版本</p>\n<p>将distributionUrl=https://services.gradle.org/distributions/gradle-8.3-bin.zip\n修改为\ndistributionUrl=https://services.gradle.org/distributions/gradle-8.6-bin.zip</p>\n<blockquote>\n<p>对于国内的用户，推荐使用<a href=\"https://mirrors.cloud.tencent.com/gradle/\" target=\"_blank\" rel=\"noopener noreferrer\">腾讯云的Gradle镜像</a>\n修改为distributionUrl=https://mirrors.cloud.tencent.com/gradle/gradle-8.6-all.zip</p>\n</blockquote>\n<p>此时再点击构建，会自动下载对应版本的Gradle，然后再下载需要的Gradle插件。</p>\n<p>如果成功的话，就可以在./build/outputs/apk/debug下找到构建好的apk了</p>\n<p>对于国内的用户，gradle默认的下载仓库地址可能会导致下载失败或下载缓慢，可以在build.gradle文件中，增加阿里云的下载地址：</p>\n<div class=\"language-text\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code><span class=\"line\">repositories {</span>\n<span class=\"line\">        mavenCentral()</span>\n<span class=\"line\">        maven { url 'https://maven.aliyun.com/repository/public/' }</span>\n<span class=\"line\">        maven { url 'https://maven.aliyun.com/repository/central' }</span>\n<span class=\"line\">        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }</span>\n<span class=\"line\">        mavenLocal()</span>\n<span class=\"line\">        google()</span>\n<span class=\"line\">}</span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre></div><h2>运行安装apk</h2>\n<p>在Linux环境下，可以使用adb命令安装APK到安卓设备，当然，你也可以选择使用Qtcreator一键运行。</p>\n<p>在使用USB连接你的安卓设备后使用adb命令安装</p>\n<div class=\"language-bash\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"line\">adb <span class=\"token function\">install</span> android-build-debug.apk</span>\n<span class=\"line\"></span></code></pre></div><p>确保你的安卓设备打开了开发者模式，具体打开方式请根据自己设备型号搜索。</p>\n<p>如果你想要在电脑上分享手机中apk的运行情况，可以使用scrcpy\n<a href=\"https://github.com/Genymobile/scrcpy\" target=\"_blank\" rel=\"noopener noreferrer\">Genymobile/scrcpy: Display and control your Android device</a></p>\n",
      "date_published": "2024-07-23T00:00:00.000Z",
      "date_modified": "2024-07-29T13:21:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2024OSPP KDE项目中期总结",
      "url": "https://heeiya.github.io/KDEBlog/zh/posts/2024OSPP%20KDE%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%9C%9F%E6%80%BB%E7%BB%93.html",
      "id": "https://heeiya.github.io/KDEBlog/zh/posts/2024OSPP%20KDE%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%9C%9F%E6%80%BB%E7%BB%93.html",
      "summary": "2024OSPP KDE项目中期总结\nOSPP项目开始已经过去三周了，三周过去，我的项目已经取得了一定的进展。\n第一周 7月1号——7月7号\n在项目的第一周，在导师的帮助下，我首先配置好了一个合适的开发环境，并确定了项目的首先迁移的应用为Blinken。除此之外，也搭建这个项目博客，目前博客已经被KDE planet收录。\n目前使用的开发环境在一台Fe...",
      "content_html": "\n<p>OSPP项目开始已经过去三周了，三周过去，我的项目已经取得了一定的进展。</p>\n<h2>第一周 7月1号——7月7号</h2>\n<p>在项目的第一周，在导师的帮助下，我首先配置好了一个合适的开发环境，并确定了项目的首先迁移的应用为Blinken。除此之外，也搭建这个项目博客，目前博客已经被KDE planet收录。</p>\n<p>目前使用的开发环境在一台Fedora workstation 40 的Virtual Box虚拟机上，在这台虚拟机上我可以编译构建KDE应用，并进行Qt开发。</p>\n<p>构建KDE开发环境推荐使用KDE官方提供的<a href=\"https://develop.kde.org/docs/getting-started/building/kdesrc-build-setup/\" target=\"_blank\" rel=\"noopener noreferrer\">kdesrc-build</a>，同时也推荐在KDE的Neon系统下进行开发，可以选择使用<a href=\"https://community.kde.org/Get_Involved/development/More#Develop_in_a_Linux_container\" target=\"_blank\" rel=\"noopener noreferrer\">docker</a> 或者<a href=\"https://community.kde.org/Get_Involved/development/Developing_in_a_virtual_machine\" target=\"_blank\" rel=\"noopener noreferrer\">虚拟机</a></p>\n<p>构建Qt安卓开发环境比较简单的方法是使用[Qt Online Installer](<a href=\"https://doc.qt.io/qt-6/get-and-install-qt.html#using-qt-maintenance-tool\" target=\"_blank\" rel=\"noopener noreferrer\">Get and Install Qt | Qt 6.7</a>)和QtCreator\n装好QtCreator之后，在Editing-&gt; Perferences-&gt;devices-&gt; Android 那里可以选择自己需要的开发套件，QtCreator会自动下载需要的Sdk和Ndk。</p>\n<h2>第二周 7月8号——7月14号</h2>\n<p>在导师的建议下，我开发了一个简单的Tic-Tac-Toe的QML游戏作为练手。\n这个游戏使用QML绘制了一个简单的页面，并使用C++class控制游戏逻辑，我即将迁移的游戏也将会是这种架构。</p>\n<p>游戏目前实现的特性有</p>\n<ol>\n<li>多语言本地化支持</li>\n<li>具备单元测试</li>\n<li>可以跨平台运行</li>\n</ol>\n<p>Tic-Tac-Toe游戏目前已经被我放到KDE invent上。<a href=\"https://invent.kde.org/zhy/tictactoe\" target=\"_blank\" rel=\"noopener noreferrer\">hanyang zhang / TicTacToe · GitLab</a></p>\n<p>对QML应用做本地化支持需要使用Qt提供的本地化工具lupdate、lrelease等。\n但是因为项目使用Cmake构建，Qt也提供了相应的Cmake方法：<a href=\"https://doc.qt.io/qt-6/qtlinguist-cmake-qt-add-translations.html\" target=\"_blank\" rel=\"noopener noreferrer\">qt_add_translations | Qt Linguist Manual</a></p>\n<p>另外，我在构建QML安卓应用时遇到了一些困难，见：\n<a href=\"https://heeiya.github.io/KDEBlog/zh/posts/QML%20%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E6%9E%84%E5%BB%BA%E4%B8%8E%E8%BF%90%E8%A1%8C.html\" target=\"_blank\" rel=\"noopener noreferrer\">QML 安卓应用构建与运行 | Blog</a></p>\n<h2>第三周 7月15号——7月21号</h2>\n<p>在这一周我正式开始迁移Blinken的工作。</p>\n<p>在研究了Blinken的源码之后，我发现Blinken的界面是由一个名为Blinken的类绘制的，这个类有1000多行，绘制逻辑一部分为操作Blinken.svg中元素，另外一部分为使用QPainter直接绘制。</p>\n<p>但是遗憾的是，QML中并没有提供如Qtwight那样操作SVG图片的功能，于是我用Adobe Illustrator和Inkscape对SVG图片进行了拆分和编辑，将所有元素分别单独拆为文件，并用QML将这些元素组装了起来。</p>\n<p></p>\n<p>对UI的修改花费的时间比我想象中的长，不过一周过去，我基本完成了对Blinken界面的绘制，接下来主要是修改一些页面细节，以及将Blinken的逻辑转移过来。</p>\n<p>值得一提的是，QML并未提供非矩形的MouseArea供使用，需要自己写一个类来实现这个功能。不过好在早期版本的文档里提供了一个这样的example<a href=\"https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/customitems/maskedmousearea?h=6.2\" target=\"_blank\" rel=\"noopener noreferrer\">maskedmousearea « customitems « quick « examples - qt/qtdeclarative.git - Qt Declarative (Quick 2)</a>\n虽然不知道为什么这个例子在最新版本中被删除了，但应该可以参照着实现。</p>\n",
      "date_published": "2024-07-21T00:00:00.000Z",
      "date_modified": "2024-07-29T13:21:26.000Z",
      "authors": [],
      "tags": [
        "OSPP"
      ]
    },
    {
      "title": "2024OSPP KDE社区项目：Porting KDE Games to Android platform",
      "url": "https://heeiya.github.io/KDEBlog/zh/posts/2024OSPP%20KDE%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE%EF%BC%9APorting%20KDE%20Games%20to%20Android%20platform.html",
      "id": "https://heeiya.github.io/KDEBlog/zh/posts/2024OSPP%20KDE%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE%EF%BC%9APorting%20KDE%20Games%20to%20Android%20platform.html",
      "summary": "2024OSPP KDE社区项目：Porting KDE Games to Android platform\n在2024年开源之夏（OSPP）活动中，我很荣幸被KDE社区的项目：Porting KDE Games to Android platform 选中。这是KDE社区首次参加OSPP，也是他们第一个，而且是唯一一个项目。\n\n关于KDE社区：\n什么...",
      "content_html": "\n<p>在2024年开源之夏（OSPP）活动中，我很荣幸被KDE社区的项目：Porting KDE Games to Android platform 选中。这是KDE社区首次参加OSPP，也是他们第一个，而且是唯一一个项目。</p>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8d/KDE_logo.svg/330px-KDE_logo.svg.png\">\n<p>关于KDE社区：\n<a href=\"https://userbase.kde.org/What_is_KDE/zh-cn\" target=\"_blank\" rel=\"noopener noreferrer\">什么是 KDE - KDE UserBase Wiki</a></p>\n<blockquote>\n<p>KDE 是由全球程序员、译者、贡献者、艺术家、作者、发行商和用户组成的庞大<strong>社区</strong>，致力于为桌面造出最好的自由软件。KDE 软件的用户和粉丝也遍布全球，他们互帮互助，传播社区消息新闻，或仅仅是享受这种美妙的体验。</p>\n</blockquote>\n<p>KDE官网\n<a href=\"https://kde-china.org/\" target=\"_blank\" rel=\"noopener noreferrer\">KDE 中国 | KDE 中国社区</a>\n<a href=\"https://kde.org/zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">首页 - KDE 社区</a></p>\n<img src=\"https://summer-ospp.ac.cn/help/assets/logo.svg\">\n<p>关于OSPP（开源之夏）：</p>\n<blockquote>\n<p>开源之夏是由“<strong>开源软件供应链点亮计划</strong>”发起并长期支持的一项暑期开源活动，旨在鼓励在校学生积极参与开源软件的开发维护，促进优秀开源软件社区的蓬勃发展，培养和发掘更多优秀的开发者。 活动联合国内外各大开源社区，针对重要开源软件的开发与维护提供项目任务，并面向全球高校学生开放报名。\n<a href=\"https://summer-ospp.ac.cn/?lang=en\" target=\"_blank\" rel=\"noopener noreferrer\">开源软件供应链点亮计划-开源之夏2024</a></p>\n</blockquote>\n<h2>项目介绍</h2>\n<p>KDE项目：<a href=\"https://summer-ospp.ac.cn/org/prodetail/24b5c0531?list=org&amp;navpage=org\" target=\"_blank\" rel=\"noopener noreferrer\">Porting KDE Games to Android platform</a>的描述如下</p>\n<blockquote>\n<p>KDE Games and educational games are integral parts of the KDE Gear suite. Very few application are currently operational on platforms other than Linux, such as Android. The supported applications can be viewed at https://apps.kde.org/platforms/android. Consequently, we plan to port some of these games to Android, specifically supporting architectures like arm64-v8a, x86, and x86_64. The ultimate goal is to distribute their Android versions through apps.kde.org, F-Droid, Google Store, etc.</p>\n<p>Candidates for porting include Kajongg, KMahjongg, KShisen, Kigo, Blinken, Klickety, Skladnik, Kbounce, Kollision, KSudoku, KTurtle, Picmi, and Klines. You can learn about their features and code at apps.kde.org or invent.kde.org.</p>\n<p>Finally, you will port one or more of these games to Android and facilitate community efforts to distribute them through software stores.</p>\n</blockquote>\n<p>简单来说，就是移植一些KDE游戏到安卓平台，这些游戏目前只能在Linux平台获取，如果你使用Ubuntu系统，可以通过以下方式安装并运行一款游戏</p>\n<div class=\"language-bash\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"line\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> Kollision</span>\n<span class=\"line\">kollision</span>\n<span class=\"line\"></span></code></pre></div><p>可供选择的游戏包括\nKajongg, KMahjongg, KShisen, Kigo, Blinken, Klickety, Skladnik, Kbounce, Kollision, KSudoku等。但是项目结项只需要完成一个游戏的移植就可以了。</p>\n",
      "date_published": "2024-07-03T00:00:00.000Z",
      "date_modified": "2024-07-15T02:20:30.000Z",
      "authors": [],
      "tags": [
        "OSPP"
      ]
    },
    {
      "title": "自我介绍",
      "url": "https://heeiya.github.io/KDEBlog/zh/posts/%E5%85%B3%E4%BA%8E%E6%88%91.html",
      "id": "https://heeiya.github.io/KDEBlog/zh/posts/%E5%85%B3%E4%BA%8E%E6%88%91.html",
      "summary": "自我介绍\n这里暂时是空白",
      "content_html": "\n<p>这里暂时是空白</p>\n",
      "date_published": "2021-01-01T00:00:00.000Z",
      "date_modified": "2024-07-04T14:24:59.000Z",
      "authors": [],
      "tags": [
        "introduction"
      ]
    }
  ]
}