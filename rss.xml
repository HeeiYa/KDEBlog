<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://heeiya.github.io/KDEBlog/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://heeiya.github.io/KDEBlog/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Blog</title>
    <link>https://heeiya.github.io/KDEBlog/</link>
    <description>A blog now mainly about my particpation in OSPP with KDE </description>
    <language>en-US</language>
    <pubDate>Mon, 29 Jul 2024 13:21:59 GMT</pubDate>
    <lastBuildDate>Mon, 29 Jul 2024 13:21:59 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <image>
      <title>Blog</title>
      <url>https://avatars.githubusercontent.com/u/90752469?s=400&amp;u=69796f3c09ffaa19d5dc128699599458dadb5d14&amp;v=4</url>
      <link>https://heeiya.github.io/KDEBlog/</link>
    </image>
    <category>OSPP</category>
    <category>introduction</category>
    <item>
      <title>Building and Running QML Android Applications</title>
      <link>https://heeiya.github.io/KDEBlog/posts/QML%20%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E6%9E%84%E5%BB%BA%E4%B8%8E%E8%BF%90%E8%A1%8C.html</link>
      <guid>https://heeiya.github.io/KDEBlog/posts/QML%20%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E6%9E%84%E5%BB%BA%E4%B8%8E%E8%BF%90%E8%A1%8C.html</guid>
      <source url="https://heeiya.github.io/KDEBlog/rss.xml">Building and Running QML Android Applications</source>
      <description>Building and Running QML Android Applications
Building QML Android Applications
Qt Creator uses Gradle for project building. Once your project code is ready, select the Android ...</description>
      <pubDate>Tue, 23 Jul 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Building QML Android Applications</h2>
<p>Qt Creator uses Gradle for project building. Once your project code is ready, select the Android kit for building in Qt Creator. Click build, and Qt Creator will generate Gradle configuration files for you. However, you may encounter errors such as:</p>
<blockquote>
<p>Execution failed for task ':processDebugResources'.
A failure occurred while executing com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask$TaskAction
Android resource linking failed
aapt2 E 07-23 15:59:44 51907 51907 LoadedArsc.cpp:94] RES_TABLE_TYPE_TYPE entry offsets overlap actual entry data.
aapt2 E 07-23 15:59:44 51907 51907 ApkAssets.cpp:149] Failed to load resources table in APK '/home/zhy/Android/Sdk/platforms/android-35/android.jar'.</p>
</blockquote>
<p>This is because the current Gradle plugin version does not support android-35. See<a href="https://stackoverflow.com/questions/54152209/how-to-fix-execution-failed-for-task-appprocessdebugresources-android-re" target="_blank" rel="noopener noreferrer">How to fix "Execution failed for task ':app:processDebugResources'. &gt; Android resource linking failed"[Android/Flutter] - Stack Overflow</a></p>
<p>To resolve this issue, you need to modify the Gradle configuration.</p>
<p>Navigate to the <code>/build/Qt_6_7_2_Clang_arm64_v8a-Debug/android-build</code> folder in your project.</p>
<p>Open the <code>build.gradle</code> file and locate the <code>dependencies</code> block:</p>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">dependencies {</span>
<span class="line">        classpath 'com.android.tools.build:gradle:7.4.1'</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><code>com.android.tools.build:gradle:7.4.1</code> refers to the Android Gradle Plugin (AGP). This default version is from 2022 and is quite outdated.</p>
<p>You can find the latest version here: <a href="https://mvnrepository.com/artifact/com.android.tools.build/gradle?repo=google" target="_blank" rel="noopener noreferrer">Maven Repository: com.android.tools.build Â» gradle</a></p>
<p>Update the plugin version to a newer one, for example:</p>
<div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">    dependencies {</span>
<span class="line">        classpath 'com.android.tools.build:gradle:8.4.1'</span>
<span class="line">    }</span>
<span class="line"></span></code></pre></div><p>Additionally, when upgrading the plugin version, ensure compatibility with the <a href="https://gradle.org/releases/" target="_blank" rel="noopener noreferrer">Gradle version</a>.</p>
<p>Check the relationship between the Gradle and AGP versions here: <a href="https://developer.android.com/build/releases/gradle-plugin#updating-gradle" target="_blank" rel="noopener noreferrer">Android Gradle plugin 8.5 release notes | Android Studio | Android Developers</a></p>
<blockquote>
<p>Reference: <a href="https://stackoverflow.com/questions/70545646/could-not-find-com-android-tools-buildgradle7-3-3-error-found-in-build-gradle" target="_blank" rel="noopener noreferrer">Could not find com.android.tools.build:gradle:7.3.3. error found in build.gradle file - Stack Overflow</a></p>
</blockquote>
<p>Therefore, you should use at least Gradle version 8.6 to support this plugin.</p>
<p>Navigate to the <code>./gradle/wrapper</code> folder and open the <code>gradle-wrapper.properties</code> file. This file defines the Gradle version used by the project.</p>
<p>Find the line:
<code>distributionUrl=https\://services.gradle.org/distributions/gradle-8.3-bin.zip</code></p>
<p>Change it to:</p>
<p><code>distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-bin.zip</code></p>
<p>This update specifies that the project will use Gradle version 8.6.</p>
<p>After making these changes, click on build. It will automatically download the specified version of Gradle and then download the necessary Gradle plugins.</p>
<p>If successful, you can find the built APK at <code>./build/outputs/apk/debug</code>.</p>
<h2>Running and Installing APK</h2>
<p>In a Linux environment, you can use the adb command to install the APK on your Android device. Alternatively, you can use Qt Creator for one-click deployment.</p>
<p>After connecting your Android device via USB, use the adb command to install the APK:</p>
<div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">adb <span class="token function">install</span> android-build-debug.apk</span>
<span class="line"></span></code></pre></div><p>Make sure that your Android device has Developer Mode enabled. You can find specific instructions on how to enable Developer Mode based on your device model through an online search.</p>
<p>If you want to share the screen on your phone on PC, you can use scrcpy:<a href="https://github.com/Genymobile/scrcpy" target="_blank" rel="noopener noreferrer">Genymobile/scrcpy: Display and control your Android device</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Mid-Term Summary of 2024 OSPP KDE Project</title>
      <link>https://heeiya.github.io/KDEBlog/posts/2024OSPP%20KDE%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%9C%9F%E6%80%BB%E7%BB%93.html</link>
      <guid>https://heeiya.github.io/KDEBlog/posts/2024OSPP%20KDE%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%9C%9F%E6%80%BB%E7%BB%93.html</guid>
      <source url="https://heeiya.github.io/KDEBlog/rss.xml">Mid-Term Summary of 2024 OSPP KDE Project</source>
      <description>Mid-Term Summary of 2024 OSPP KDE Project
It has been three weeks since the start of the OSPP project, during which my project has made some progress.
Week 1, July 1st to July 7...</description>
      <category>OSPP</category>
      <pubDate>Sun, 21 Jul 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>It has been three weeks since the start of the OSPP project, during which my project has made some progress.</p>
<h2>Week 1, July 1st to July 7th</h2>
<p>In the first week of the project, with the help of my mentor, I first set up a suitable development environment and identified Blinken as the first application to be migrated for the project. In addition to this, I also set up this project's blog, which has now been included in KDE Planet.</p>
<p>Currently, I am using a development environment on a VirtualBox virtual machine running Fedora Workstation 40. With this setup, I can compile and build KDE applications and perform Qt development.</p>
<p>For building the KDE development environment, it is recommended to use<a href="https://develop.kde.org/docs/getting-started/building/kdesrc-build-setup/" target="_blank" rel="noopener noreferrer">kdesrc-build</a> provided by KDE official, and it is also recommended to develop under KDE Neon system, which can be done using <a href="https://community.kde.org/Get_Involved/development/More#Develop_in_a_Linux_container" target="_blank" rel="noopener noreferrer">docker</a> or <a href="https://community.kde.org/Get_Involved/development/Developing_in_a_virtual_machine" target="_blank" rel="noopener noreferrer">virtual machines</a></p>
<p>A straightforward method for setting up Qt Android development environment is to use[Qt Online Installer](<a href="https://doc.qt.io/qt-6/get-and-install-qt.html#using-qt-maintenance-tool" target="_blank" rel="noopener noreferrer">Get and Install Qt | Qt 6.7</a>) and Qt Creator. After installing Qt Creator, navigate to Editing -&gt; Preferences -&gt; Devices -&gt; Android to select the necessary development kit. Qt Creator will automatically download the required SDK and NDK.</p>
<h2>Week 2, July 8th to July 14th</h2>
<p>Upon my mentor's suggestion, I developed a simple Tic-Tac-Toe QML game as a practice exercise. This game uses QML to create a simple interface and employs a C++ class to handle game logic, which will also be the architecture for the upcoming game migration.</p>
<p>The current features implemented in the game are:</p>
<ol>
<li>Multilingual localization support</li>
<li>Unit testing capability</li>
<li>Cross-platform compatibility</li>
</ol>
<p>The Tic-Tac-Toe game is openly developed on KDE Invent: <a href="https://invent.kde.org/zhy/tictactoe" target="_blank" rel="noopener noreferrer">hanyang zhang / TicTacToe Â· GitLab</a></p>
<p>Supporting localization for QML applications requires the use of Qt's localization tools such as lupdate and lrelease. However, since the project is built with CMake, Qt also provides corresponding CMake methods: <a href="https://doc.qt.io/qt-6/qtlinguist-cmake-qt-add-translations.html" target="_blank" rel="noopener noreferrer">qt_add_translations | Qt Linguist Manual</a></p>
<p>Additionally, I encountered some difficulties while building QML Android applications, as described here:
<a href="https://heeiya.github.io/KDEBlog/posts/QML%20%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E6%9E%84%E5%BB%BA%E4%B8%8E%E8%BF%90%E8%A1%8C.html#building-qml-android-applications" target="_blank" rel="noopener noreferrer">Building and Running QML Android Applications | Blog</a></p>
<h2>Week 3, July 15th to July 21st</h2>
<p>During this week, I officially began the migration work for Blinken.</p>
<p>After studying Blinken's source code, I found that the interface of Blinken is drawn by a class named Blinken, which spans over 1000 lines. The drawing logic involves manipulating elements from Blinken.svg and using QPainter for direct drawing.</p>
<p>Unfortunately, QML does not provide built-in support for manipulating SVG images like QtWidgets. Therefore, I split the SVG images into separate files and assembled these elements using QML with Adobe Illustrator and Inkscape.</p>
<p></p>
<p>Modifying the UI took longer than I anticipated. However, after a week, I have nearly completed the interface drawing for Blinken. Next steps involve refining some page details and migrating Blinken's logic over.</p>
<p>It's worth mentioning that QML does not provide a non-rectangular MouseArea for use, requiring the creation of a custom class to achieve this functionality. Fortunately, an example for this existed in earlier versions of the documentation: <a href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/customitems/maskedmousearea?h=6.2" target="_blank" rel="noopener noreferrer">maskedmousearea example</a>. Although this example seems to have been removed in the latest version, it should still be feasible to implement based on reference.</p>
]]></content:encoded>
    </item>
    <item>
      <title>2024OSPP KDEç¤¾åºé¡¹ç®ï¼Porting KDE Games to Android platform</title>
      <link>https://heeiya.github.io/KDEBlog/posts/2024OSPP%20KDE%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE%EF%BC%9APorting%20KDE%20Games%20to%20Android%20platform.html</link>
      <guid>https://heeiya.github.io/KDEBlog/posts/2024OSPP%20KDE%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE%EF%BC%9APorting%20KDE%20Games%20to%20Android%20platform.html</guid>
      <source url="https://heeiya.github.io/KDEBlog/rss.xml">2024OSPP KDEç¤¾åºé¡¹ç®ï¼Porting KDE Games to Android platform</source>
      <description>2024OSPP KDEç¤¾åºé¡¹ç®ï¼Porting KDE Games to Android platform
During the 2024 Open Source Promotion Plan (OSPP) event, I had the honor of being selected for the KDE community project: ...</description>
      <category>OSPP</category>
      <pubDate>Wed, 03 Jul 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>During the 2024 Open Source Promotion Plan (OSPP) event, I had the honor of being selected for the KDE community project: Porting KDE Games to the Android platform. This is KDE community's first participation in OSPP, and it is their first and only project.</p>
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/8d/KDE_logo.svg/330px-KDE_logo.svg.png">
<p>About the KDE Community: <a href="https://userbase.kde.org/What_is_KDE/zh-cn" target="_blank" rel="noopener noreferrer">What is KDE - KDE UserBase Wiki</a></p>
<blockquote>
<p>KDE is a large <strong>community</strong> of programmers, translators, contributors, artists, authors, distributors, and users from around the world, dedicated to creating the best free software for desktops. Users and fans of KDE software are also spread globally, helping each other, spreading community news, or just enjoying this wonderful experience.</p>
</blockquote>
<p><a href="https://kde.org/zh-cn/" target="_blank" rel="noopener noreferrer">KDE community</a></p>
<img src="https://summer-ospp.ac.cn/help/assets/logo.svg">
<p>About OSPP (Open Source Promotion Plan):</p>
<blockquote>
<p>The Open Source Promotion Plan is a summer open source event initiated and long-term supported by the "<strong>Open Source Software Supply Chain Lighting Plan</strong>". It aims to encourage students to actively participate in the development and maintenance of open source software, promote the vigorous development of outstanding open source software communities, and cultivate and discover more excellent developers. The event collaborates with major open source communities at home and abroad, providing project tasks for the development and maintenance of important open source software and is open to global college students for registration. <a href="https://summer-ospp.ac.cn/?lang=en" target="_blank" rel="noopener noreferrer">Open Source Software Supply Chain Lighting Plan - OSPP 2024</a></p>
</blockquote>
<h2>Project Introduction</h2>
<p>The description of the KDE project: <a href="https://summer-ospp.ac.cn/org/prodetail/24b5c0531?list=org&amp;navpage=org" target="_blank" rel="noopener noreferrer">Porting KDE Games to Android platform</a> is as follows:</p>
<blockquote>
<p>KDE Games and educational games are integral parts of the KDE Gear suite. Very few applications are currently operational on platforms other than Linux, such as Android. The supported applications can be viewed at <a href="https://apps.kde.org/platforms/android" target="_blank" rel="noopener noreferrer">https://apps.kde.org/platforms/android</a>. Consequently, we plan to port some of these games to Android, specifically supporting architectures like arm64-v8a, x86, and x86_64. The ultimate goal is to distribute their Android versions through apps.kde.org, F-Droid, Google Store, etc.</p>
<p>Candidates for porting include Kajongg, KMahjongg, KShisen, Kigo, Blinken, Klickety, Skladnik, Kbounce, Kollision, KSudoku, KTurtle, Picmi, and Klines. You can learn about their features and code at apps.kde.org or invent.kde.org.</p>
<p>Finally, you will port one or more of these games to Android and facilitate community efforts to distribute them through software stores.</p>
</blockquote>
<p>In simple terms, the project involves porting some KDE games to the Android platform, as these games are currently only available on the Linux platform. If you use Ubuntu, you can install and run a game with the following commands:</p>
<ol>
<li>sudo apt install Kollision</li>
<li>kollision</li>
</ol>
<p>Available games include Kajongg, KMahjongg, KShisen, Kigo, Blinken, Klickety, Skladnik, Kbounce, Kollision, KSudoku, KTurtle, Picmi, and Klines. However, for the completion of the project, porting just one game is sufficient.</p>
<h2>My Application Experience</h2>
<p>When I first saw this project, it was quite late, with less than a week before the application deadline. Before that, I had already written an application for another project. However, after seeing this project, I felt it was more appealing to me. Unfortunately, at that time, I was preparing for an exam, so I had only two days left to write the application.</p>
<p>After pulling an all-nighter, I submitted my application and listed this project as my first choice. Finally, on June 26, I received an email confirming that my application had been accepted.</p>
<h2>Reason for Applying</h2>
<p>Since my primary programming language is C++, I chose this project from the list of C++ projects. Compared to other projects, I found this one more interesting.</p>
<p>Initially, I did not know that this was KDE community's first participation in OSPP, nor did I know it was their first and only project. I also wasn't familiar with the KDE community. After learning about the KDE community, I discovered that I really liked their philosophy. The mentor was also very enthusiastic and emphasized the importance of communication multiple times during the application process, providing me with a lot of help.</p>
<h2>Project Development Plan</h2>
<p>The project uses QML to port the applications to Android. In simple terms, the process is divided into the following steps:</p>
<ol>
<li>Configure the development environment.</li>
<li>Create a QtQuick project and start the migration:
<ol>
<li>Implement the UI.</li>
<li>Port the logic code.</li>
</ol>
</li>
<li>Package, deploy, and test.</li>
</ol>
<p>Currently, I have roughly completed the work of configuring the environment.</p>
<p>Since I only have a Windows machine at the moment, my solution is to run a Fedora Workstation 40 virtual machine using VirtualBox. In the virtual machine, I use podman and distrobox to set up the KDE development environment with the KDE kdesrc-build tool.</p>
]]></content:encoded>
    </item>
    <item>
      <title>About me</title>
      <link>https://heeiya.github.io/KDEBlog/posts/%E5%85%B3%E4%BA%8E%E6%88%91.html</link>
      <guid>https://heeiya.github.io/KDEBlog/posts/%E5%85%B3%E4%BA%8E%E6%88%91.html</guid>
      <source url="https://heeiya.github.io/KDEBlog/rss.xml">About me</source>
      <description>About me
nothing for now</description>
      <category>introduction</category>
      <pubDate>Fri, 01 Jan 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>nothing for now</p>
]]></content:encoded>
    </item>
  </channel>
</rss>